import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Switch, Route, Link, useLocation } from "react-router-dom";
import { useHistory } from 'react-router-dom';
import { fetchUsers } from '../../services/api'
import './admin.css';
import CISadmin from "./CISadmin.js";
import CWMadmin from "./CWMadmin.js";
import ELOGadmin from "./ELOGadmin.js";
import { GridRowModes, GridRowEditStopReasons } from '@mui/x-data-grid';

const roles = ['CIS', 'CWM', 'ELOG'];

const Admin = () => {
  const [activeTab, setActiveTab] = useState(null);
  const [users, setUsers] = useState([]);
  const [rows, setRows] = useState([]);
  const [rowModesModel, setRowModesModel] = useState({});
  const history = useHistory();
  const location = useLocation();

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const data = await fetchUsers();
        const usersWithIds = data.map((user, index) => ({
          id: index + 1,
          name: user.uid,
          email: user.mail,
          role: [], // Initially no role selected
        }));
        setUsers(usersWithIds);
        setRows(usersWithIds);
      } catch (error) {
        console.error('Error fetching users:', error.message);
        // Handle error accordingly
      }
    };
  
    fetchUser();
  }, []);
  
  useEffect(() => {
    if (activeTab) {
      history.push(`/${activeTab.toLowerCase()}`);
    } else {
      history.push('/admin');
    }
  }, [activeTab, history]);

  const handleEditClick = id => () => {
    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });
  };

  const handleSaveClick = id => () => {
    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });
  };

  const handleDeleteClick = id => () => {
    setRows(rows => rows.filter(row => row.id !== id));
  };

  const handleCancelClick = id => () => {
    setRowModesModel({
      ...rowModesModel,
      [id]: { mode: GridRowModes.View, ignoreModifications: true }
    });

    const editedRow = rows.find(row => row.id === id);
    if (editedRow.isNew) {
      setRows(rows => rows.filter(row => row.id !== id));
    }
  };

  const processRowUpdate = newRow => {
    const updatedRow = { ...newRow, isNew: false };
    setRows(rows => rows.map(row => (row.id === newRow.id ? updatedRow : row)));
    return updatedRow;
  };

  const handleRowModesModelChange = newRowModesModel => {
    setRowModesModel(newRowModesModel);
  };

  const handleRowEditStop = (params, event) => {
    if (params.reason === GridRowEditStopReasons.rowFocusOut) {
      event.defaultMuiPrevented = true;
    }
  };

  const renderPage = () => {
    switch (activeTab) {
      case "CISadmin":
        return <CISadmin />;
      case "CWMadmin":
        return <CWMadmin />;
      case "ELOGadmin":
        return <ELOGadmin />;
      default:
        return <div className="welcome-message">Welcome to the Admin Page!<br /></div>;
    }
  };

  return (
    <div className="general-admin">
      {/* Dropdown button positioned next to the heading text */}
      <div className="dropdown">
        <button className="admin-dropbtn">Select Admin</button>
        <div className="admin-dropdown">
          <button onClick={() => setActiveTab("CISadmin")}>CIS</button>
          <button onClick={() => setActiveTab("CWMadmin")}>CWM</button>
          <button onClick={() => setActiveTab("ELOGadmin")}>ELOG</button>
        </div>
      </div>

      <h1>Admin Dashboard</h1>

      {/* Render the selected page or welcome message */}
      {renderPage()}

    </div>
  );
};

export default Admin;
